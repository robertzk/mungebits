% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mungebit.r
\docType{class}
\name{mungebit__initialize}
\alias{mungebit__initialize}
\alias{mungebit__predict}
\alias{mungebit__run}
\alias{mungebit__train}
\title{Constructor for mungebit class.}
\usage{
mungebit__initialize(train_fn = function(x) x, predict_fn = train_fn,
  enforce_train = TRUE)

mungebit__run(mungeplane, ...)

mungebit__predict(mungeplane, ...)

mungebit__train(mungeplane, ...)
}
\arguments{
\item{train_fn}{function. This specifies the behavior to perform
on the dataset when preparing for model training. A value of NULL
specifies that there should be no training step.}

\item{predict_fn}{function. This specifies the behavior to perform
on the dataset when preparing for model prediction. A value of NULL
specifies that there should be no prediction step.}

\item{enforce_train}{logical. Whether or not to flitch the trained flag
during runtime.}

\item{mungeplane}{mungeplane. Essentially an environment containing
a \code{data} variable.}

\item{...}{additional arguments to the mungebit's \code{train_fn} or
\code{predict_fn}.}
}
\description{
Mungebits are atomic data transformations of a data.frame that,
loosely speaking, aim to modify "one thing" about a variable or
collection of variables. This is pretty loosely defined, but examples
include dropping variables, mapping values, discretization, etc.

Imagine flipping a switch on a set of train tracks. A mungebit
behaves like this: once the \code{trained} switch is flipped,
it can only run the \code{predict_fn}, otherwise it will
run the \code{train_fn}.

Run the predict function on a mungebit.

Run the train function on a mungebit.
}
\examples{
\dontrun{
mp <- mungeplane(iris)
mb <- mungebit(column_transformation(function(col, scale = NULL) {
  if ('scale' \%in\% names(inputs))
    cat("Column scaled by ", inputs$scale, "\\n")
  else inputs$scale <<- scale
  col * inputs$scale
}))
mb$run(mp, 'Sepal.Length', 2)
# mp$data now contains a copy of iris w/ the Sepal.Length column doubled
head(mp$data[[1]] / iris[[1]])
# > [1] 2 2 2 2 2 2
mb$run(mp, 'Sepal.Length')
# > Column scaled by 2
head(mp$data[[1]] / iris[[1]])
# > [1] 4 4 4 4 4 4 
}

}
\seealso{
\code{\link{mungepiece}}

\code{\link{mungebit__initialize}}

\code{\link{mungebit__run}}, \code{\link{mungebit__initialize}}

\code{\link{mungebit__run}}, \code{\link{mungebit__initialize}}
}

